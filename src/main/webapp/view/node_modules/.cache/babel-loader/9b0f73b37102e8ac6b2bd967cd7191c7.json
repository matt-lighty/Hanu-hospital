{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hanu\\\\HANU_Hospital-main\\\\src\\\\main\\\\webapp\\\\view\\\\src\\\\pages\\\\patient-profile\\\\PatientProfile.js\";\nimport React, { Component } from 'react';\nimport BreadCrumbs from '../../components/breadcrumbs/BreadCrumbs';\nimport AddDialog from './AddDialog';\nimport './PatientProfile.css';\nimport { Typography } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TimeLine from '../../components/timeline/Timeline';\nimport userImage from '../../images/user.png';\nimport AddIcon from '@material-ui/icons/Add';\nimport { getRecordByPatientId, getPatientByID, getDoctors } from '../../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst breadcrumbs = {\n  active: [{\n    title: \"Dashboard\",\n    link: \"dashboard\"\n  }, {\n    title: \"Patients\",\n    link: \"patients\"\n  }],\n  current: \"Patient-Profile\"\n};\n\nclass PatientProfile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpenDialogAdd: false,\n      records: null,\n      patient: null,\n      doctors: null\n    };\n    this.handleToggleDialogAdd = this.handleToggleDialogAdd.bind(this);\n    this.findDoctor = this.findDoctor.bind(this);\n    this.getAll = this.getAll.bind(this);\n  }\n\n  handleToggleDialogAdd() {\n    this.setState(currentState => ({\n      isOpenDialogAdd: !currentState.isOpenDialogAdd\n    }));\n  }\n\n  addNewReport(data) {}\n\n  componentDidMount() {\n    this.getAll();\n  }\n\n  getAll() {\n    this.getPatientByID();\n    this.getRecordByPatientId();\n    this.getAllDoctor();\n  }\n\n  async getPatientByID() {\n    const id = window.location.href.split(\"/\").reverse()[0];\n    const patient = await getPatientByID(id);\n    this.setState({\n      patient: patient\n    });\n  }\n\n  async getRecordByPatientId() {\n    const id = window.location.href.split(\"/\").reverse()[0];\n    const records = await getRecordByPatientId(id);\n    this.setState({\n      records: records\n    });\n  }\n\n  async getAllDoctor() {\n    const doctors = await getDoctors();\n    this.setState({\n      doctors: doctors\n    });\n  }\n\n  findDoctor(id) {\n    const {\n      doctors\n    } = this.state;\n\n    if (doctors) {\n      for (let i = 0; i < doctors.length; i++) {\n        for (let j = 0; j < doctors[i].records.length; j++) {\n          if (doctors[i].records[j].id == id) {\n            return doctors[i];\n          }\n        }\n      }\n    }\n  }\n\n  dynamicSort(property) {\n    return function (a, b) {\n      return a[property] < b[property] ? 1 : a[property] > b[property] ? -1 : 0;\n    };\n  }\n\n  render() {\n    const {\n      isOpenDialogAdd,\n      records,\n      patient\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patient-profile full\",\n      children: [/*#__PURE__*/_jsxDEV(BreadCrumbs, {\n        data: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), isOpenDialogAdd && /*#__PURE__*/_jsxDEV(AddDialog, {\n        open: isOpenDialogAdd,\n        handleToggleDialogAdd: this.handleToggleDialogAdd,\n        addNewReport: this.addNewReport\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 36\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"patient-profile-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"patient-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: userImage,\n              alt: \"user-avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 25\n            }, this), patient && /*#__PURE__*/_jsxDEV(List, {\n              component: \"nav\",\n              \"aria-label\": \"mailbox folders\",\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h5\",\n                  color: \"primary\",\n                  children: patient.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: \"DOB\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: patient.dob\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: \"Phone\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: patient.phoneNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: patient.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"primary\",\n            children: \"Activity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this), records && /*#__PURE__*/_jsxDEV(TimeLine, {\n            records: records.sort(this.dynamicSort('id')),\n            findDoctor: this.findDoctor,\n            getAll: this.getAll\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default PatientProfile;","map":{"version":3,"sources":["D:/Hanu/HANU_Hospital-main/src/main/webapp/view/src/pages/patient-profile/PatientProfile.js"],"names":["React","Component","BreadCrumbs","AddDialog","Typography","Divider","List","ListItem","TimeLine","userImage","AddIcon","getRecordByPatientId","getPatientByID","getDoctors","breadcrumbs","active","title","link","current","PatientProfile","constructor","props","state","isOpenDialogAdd","records","patient","doctors","handleToggleDialogAdd","bind","findDoctor","getAll","setState","currentState","addNewReport","data","componentDidMount","getAllDoctor","id","window","location","href","split","reverse","i","length","j","dynamicSort","property","a","b","render","name","dob","phoneNumber","address","sort"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BreadCrumbs from '../../components/breadcrumbs/BreadCrumbs';\nimport AddDialog from './AddDialog';\nimport './PatientProfile.css';\nimport { Typography } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TimeLine from '../../components/timeline/Timeline'\nimport userImage from '../../images/user.png';\nimport AddIcon from '@material-ui/icons/Add';\nimport { getRecordByPatientId, getPatientByID, getDoctors } from '../../utils/api'\nconst breadcrumbs = {\n    active:\n        [\n            { title: \"Dashboard\", link: \"dashboard\" },\n            { title: \"Patients\", link: \"patients\" },\n        ],\n    current: \"Patient-Profile\"\n}\n\nclass PatientProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpenDialogAdd: false,\n            records: null,\n            patient: null,\n            doctors: null\n        }\n        this.handleToggleDialogAdd = this.handleToggleDialogAdd.bind(this);\n        this.findDoctor = this.findDoctor.bind(this);\n        this.getAll = this.getAll.bind(this);\n\n    }\n\n    handleToggleDialogAdd() {\n        this.setState((currentState) => ({\n            isOpenDialogAdd: !currentState.isOpenDialogAdd\n        }));\n    }\n\n    addNewReport(data) {\n    }\n\n    componentDidMount() {\n        this.getAll()\n    }\n\n    getAll() {\n        this.getPatientByID()\n        this.getRecordByPatientId()\n        this.getAllDoctor()\n    }\n\n    async getPatientByID() {\n        const id = window.location.href.split(\"/\").reverse()[0]\n        const patient = await getPatientByID(id);\n        this.setState({\n            patient: patient\n        })\n    }\n\n    async getRecordByPatientId() {\n        const id = window.location.href.split(\"/\").reverse()[0]\n        const records = await getRecordByPatientId(id);\n        this.setState({\n            records: records\n        })\n    }\n\n    async getAllDoctor() {\n        const doctors = await getDoctors()\n        this.setState({\n            doctors: doctors\n        })\n    }\n\n    findDoctor(id) {\n        const { doctors } = this.state;\n        if (doctors) {\n            for (let i = 0; i < doctors.length; i++) {\n                for (let j = 0; j < doctors[i].records.length; j++) {\n                    if (doctors[i].records[j].id == id) {\n                        return doctors[i]\n                    }\n                }\n            }\n        }\n    }\n\n    dynamicSort(property) {\n        return function (a, b) {\n            return (a[property] < b[property]) ? 1 : (a[property] > b[property]) ? -1 : 0;\n        }\n    }\n\n\n\n    render() {\n        const { isOpenDialogAdd, records, patient } = this.state;\n        return <div className=\"patient-profile full\">\n            <BreadCrumbs data={breadcrumbs} />\n            {\n                isOpenDialogAdd && <AddDialog\n                    open={isOpenDialogAdd}\n                    handleToggleDialogAdd={this.handleToggleDialogAdd}\n                    addNewReport={this.addNewReport}\n                />\n            }\n            <section id=\"patient-profile-section\">\n                <aside>\n                    <div id=\"patient-info\">\n                        <img src={userImage} alt=\"user-avatar\" />\n                        {patient && <List component=\"nav\" aria-label=\"mailbox folders\">\n                            <ListItem >\n                                <Typography variant=\"h5\" color=\"primary\">\n                                    {patient.name}\n                                </Typography>\n                            </ListItem>\n                            <Divider />\n                            <ListItem >\n                                <Typography variant=\"h6\" >\n                                    DOB\n                                </Typography>\n                                <Typography  >\n                                    {patient.dob}\n                                </Typography>\n                            </ListItem>\n                            <ListItem >\n                                <Typography variant=\"h6\" >\n                                    Phone\n                                </Typography>\n                                <Typography  >\n                                    {patient.phoneNumber}\n                                </Typography>\n                            </ListItem>\n                            <ListItem >\n                                <Typography variant=\"h6\" >\n                                    Address\n                                </Typography>\n                                <Typography  >\n                                    {patient.address}\n                                </Typography>\n                            </ListItem>\n                        </List>}\n                    </div>\n\n                </aside>\n                <main>\n                    <Typography variant=\"h6\" color=\"primary\">\n                        Activity\n                    </Typography>\n                    {records && <TimeLine records={records.sort(this.dynamicSort('id'))} findDoctor={this.findDoctor} getAll={this.getAll} />}\n                </main>\n            </section>\n        </div>\n    }\n}\nexport default PatientProfile;"]},"metadata":{},"sourceType":"module"}