{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hanu\\\\HANU_Hospital-main\\\\src\\\\main\\\\webapp\\\\view\\\\src\\\\pages\\\\patient\\\\Patient.js\";\nimport React, { Component } from 'react';\nimport BreadCrumbs from '../../components/breadcrumbs/BreadCrumbs';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link } from 'react-router-dom';\nimport AddPatientDialog from './AddPatientDialog';\nimport { addPatient, getAllPatients, deletePatient, editPatient } from '../../utils/api';\nimport './Patient.css';\nimport EditPatientDialog from './EditPatientDialog';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  active: [{\n    title: \"Dashboard\",\n    link: \"dashboard\"\n  }],\n  current: \"Patients\"\n};\n\nclass Patient extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangePage = (event, newPage) => {\n      this.setState({\n        page: newPage\n      });\n    };\n\n    this.handleChangeRowsPerPage = event => {\n      this.setState({\n        page: 0,\n        rowsPerPage: parseInt(event.target.value, 10)\n      });\n    };\n\n    this.handleRequestSort = (event, property) => {\n      const {\n        orderBy,\n        orderDirection\n      } = this.state;\n      const isAscending = orderBy === property && orderDirection === 'asc';\n      this.setState({\n        orderBy: property,\n        orderDirection: isAscending ? 'desc' : 'asc'\n      });\n    };\n\n    this.createSortHandler = property => event => {\n      this.handleRequestSort(event, property);\n    };\n\n    this.sortedPatient = (patient, comparator) => {\n      const stabilizedRowArray = patient.map((el, index) => [el, index]);\n      stabilizedRowArray.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n      });\n      return stabilizedRowArray.map(el => el[0]);\n    };\n\n    this.state = {\n      patients: null,\n      currentPatient: null,\n      isOpenDialogAdd: false,\n      isOpenDialogEdit: false,\n      page: 0,\n      rowsPerPage: 5,\n      orderBy: 'name',\n      orderDirection: 'asc',\n      headCells: [{\n        id: 'name',\n        label: 'Patient Name',\n        sortable: true\n      }, {\n        id: 'gender',\n        label: 'Gender'\n      }, {\n        id: 'dob',\n        label: 'DOB',\n        sortable: true\n      }, {\n        id: 'address',\n        label: 'Address'\n      }, {\n        id: 'phoneNumber',\n        label: 'Number'\n      }, {\n        id: 'action',\n        label: 'Action'\n      }]\n    };\n    this.handleToggleDialogAdd = this.handleToggleDialogAdd.bind(this);\n    this.handleToggleDialogEdit = this.handleToggleDialogEdit.bind(this);\n    this.getAllPatients = this.getAllPatients.bind(this);\n    this.deletePatient = this.deletePatient.bind(this);\n    this.addNewPatient = this.addNewPatient.bind(this);\n    this.editPatient = this.editPatient.bind(this);\n  }\n\n  handleToggleDialogAdd() {\n    this.setState(currentState => ({\n      isOpenDialogAdd: !currentState.isOpenDialogAdd\n    }));\n  }\n\n  handleToggleDialogEdit() {\n    this.setState(currentState => ({\n      isOpenDialogEdit: !currentState.isOpenDialogEdit\n    }));\n  }\n\n  async addNewPatient(data) {\n    const patient = await addPatient(data);\n    this.handleToggleDialogAdd();\n\n    if (patient) {\n      this.getAllPatients();\n    }\n  }\n\n  async editPatient(id, data) {\n    await editPatient(id, data);\n    this.handleToggleDialogEdit();\n    this.getAllPatients();\n  }\n\n  async componentDidMount() {\n    this.getAllPatients();\n  }\n\n  async getAllPatients() {\n    const patients = await getAllPatients();\n\n    if (patients) {\n      this.setState({\n        patients: patients\n      });\n    }\n  }\n\n  async deletePatient(id) {\n    await deletePatient(id);\n    this.getAllPatients();\n  }\n\n  handleEditButton(id) {\n    const {\n      patients\n    } = this.state;\n    const currentPatient = patients.filter(p => p.id === id);\n    this.setState({\n      currentPatient: currentPatient[0]\n    });\n    this.handleToggleDialogEdit();\n  }\n\n  descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => this.descendingComparator(a, b, orderBy) : (a, b) => -this.descendingComparator(a, b, orderBy);\n  }\n\n  render() {\n    const {\n      isOpenDialogAdd,\n      isOpenDialogEdit,\n      patients,\n      currentPatient,\n      orderBy,\n      orderDirection,\n      headCells,\n      page,\n      rowsPerPage\n    } = this.state;\n    let emptyRows = null;\n\n    if (patients) {\n      emptyRows = rowsPerPage - Math.min(rowsPerPage, patients.length - page * rowsPerPage);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patient full\",\n      children: [/*#__PURE__*/_jsxDEV(BreadCrumbs, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), isOpenDialogAdd && /*#__PURE__*/_jsxDEV(AddPatientDialog, {\n        open: isOpenDialogAdd,\n        handleToggleDialogAdd: this.handleToggleDialogAdd,\n        addNewPatient: this.addNewPatient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 36\n      }, this), isOpenDialogEdit && /*#__PURE__*/_jsxDEV(EditPatientDialog, {\n        open: isOpenDialogEdit,\n        handleToggleDialogEdit: this.handleToggleDialogEdit,\n        editPatient: this.editPatient,\n        patient: currentPatient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-area\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"report\",\n          onClick: this.handleToggleDialogAdd,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 81\n          }, this), \" \", /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 98\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"patient-section\",\n        className: \"main-section\",\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-area\",\n            children: [/*#__PURE__*/_jsxDEV(InputBase, {\n              className: \"seach-bar\",\n              placeholder: \"Search Patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              type: \"submit\",\n              className: \"search-button\",\n              \"aria-label\": \"search\",\n              children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: headCells.map(headCell => {\n                  return /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: headCell.sortable ? /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                      active: orderBy === headCell.id,\n                      direction: orderBy === headCell.id ? orderDirection : 'asc',\n                      onClick: this.createSortHandler(headCell.id),\n                      children: headCell.label\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 210,\n                      columnNumber: 47\n                    }, this) : headCell.label\n                  }, headCell.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 44\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [patients && patients.length > 0 && this.sortedPatient(patients, this.getComparator(orderDirection, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(p => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"left\",\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/patient-profile/${p.id}`,\n                    className: \"user-link\",\n                    children: p.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"left\",\n                  children: p.gender\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"left\",\n                  children: p.dob\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"left\",\n                  children: p.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"left\",\n                  children: p.phoneNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"left\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    color: \"primary\",\n                    size: \"small\",\n                    children: /*#__PURE__*/_jsxDEV(EditIcon, {\n                      fontSize: \"small\",\n                      className: \"edit-button\",\n                      onClick: () => {\n                        this.handleEditButton(p.id);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 234,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    color: \"secondary\",\n                    size: \"small\",\n                    onClick: () => {\n                      window.confirm('Do you want to delete ?') && this.deletePatient(p.id);\n                    },\n                    children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                      fontSize: \"small\",\n                      color: \"secondary\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 237,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 33\n                }, this)]\n              }, p.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 210\n              }, this)), emptyRows > 0 && /*#__PURE__*/_jsxDEV(TableRow, {\n                style: {\n                  height: 59 * emptyRows\n                },\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 6\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n            component: \"div\",\n            count: patients && patients.length || 0,\n            page: page,\n            onChangePage: this.handleChangePage,\n            rowsPerPage: rowsPerPage,\n            onChangeRowsPerPage: this.handleChangeRowsPerPage,\n            rowsPerPageOptions: [5, 10, 15]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Patient;","map":{"version":3,"sources":["D:/Hanu/HANU_Hospital-main/src/main/webapp/view/src/pages/patient/Patient.js"],"names":["React","Component","BreadCrumbs","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","InputBase","Button","IconButton","SearchIcon","AddIcon","EditIcon","DeleteIcon","Link","AddPatientDialog","addPatient","getAllPatients","deletePatient","editPatient","EditPatientDialog","TableSortLabel","TablePagination","data","active","title","link","current","Patient","constructor","props","handleChangePage","event","newPage","setState","page","handleChangeRowsPerPage","rowsPerPage","parseInt","target","value","handleRequestSort","property","orderBy","orderDirection","state","isAscending","createSortHandler","sortedPatient","patient","comparator","stabilizedRowArray","map","el","index","sort","a","b","order","patients","currentPatient","isOpenDialogAdd","isOpenDialogEdit","headCells","id","label","sortable","handleToggleDialogAdd","bind","handleToggleDialogEdit","addNewPatient","currentState","componentDidMount","handleEditButton","filter","p","descendingComparator","getComparator","render","emptyRows","Math","min","length","headCell","slice","name","gender","dob","address","phoneNumber","window","confirm","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BreadCrumbs from '../../components/breadcrumbs/BreadCrumbs';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link } from 'react-router-dom';\nimport AddPatientDialog from './AddPatientDialog';\nimport { addPatient, getAllPatients, deletePatient, editPatient } from '../../utils/api'\nimport './Patient.css'\nimport EditPatientDialog from './EditPatientDialog';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst data = {\n    active:\n        [\n            { title: \"Dashboard\", link: \"dashboard\" }\n        ],\n    current: \"Patients\"\n}\n\nclass Patient extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            patients: null,\n            currentPatient: null,\n            isOpenDialogAdd: false,\n            isOpenDialogEdit: false,\n            page: 0,\n            rowsPerPage: 5,\n            orderBy: 'name',\n            orderDirection: 'asc',\n            headCells: [\n                { id: 'name', label: 'Patient Name', sortable: true },\n                { id: 'gender', label: 'Gender' },\n                { id: 'dob', label: 'DOB', sortable: true },\n                { id: 'address', label: 'Address' },\n                { id: 'phoneNumber', label: 'Number' },\n                { id: 'action', label: 'Action' },\n            ],\n        }\n        this.handleToggleDialogAdd = this.handleToggleDialogAdd.bind(this);\n        this.handleToggleDialogEdit = this.handleToggleDialogEdit.bind(this);\n        this.getAllPatients = this.getAllPatients.bind(this);\n        this.deletePatient = this.deletePatient.bind(this);\n        this.addNewPatient = this.addNewPatient.bind(this);\n        this.editPatient = this.editPatient.bind(this);\n    }\n\n    handleToggleDialogAdd() {\n        this.setState((currentState) => ({\n            isOpenDialogAdd: !currentState.isOpenDialogAdd\n        }));\n    }\n\n    handleToggleDialogEdit() {\n        this.setState((currentState) => ({\n            isOpenDialogEdit: !currentState.isOpenDialogEdit\n        }));\n    }\n\n    async addNewPatient(data) {\n        const patient = await addPatient(data);\n        this.handleToggleDialogAdd();\n        if (patient) {\n            this.getAllPatients();\n        }\n    }\n\n    async editPatient(id, data) {\n        await editPatient(id, data)\n        this.handleToggleDialogEdit();\n        this.getAllPatients();\n    }\n\n    async componentDidMount() {\n        this.getAllPatients();\n    }\n\n    async getAllPatients() {\n        const patients = await getAllPatients();\n        if (patients) {\n            this.setState({ patients: patients });\n        }\n    }\n\n    async deletePatient(id) {\n        await deletePatient(id);\n        this.getAllPatients()\n    }\n\n    handleEditButton(id) {\n        const { patients } = this.state;\n        const currentPatient = patients.filter((p) => p.id === id)\n        this.setState({\n            currentPatient: currentPatient[0]\n        })\n        this.handleToggleDialogEdit();\n    }\n\n    handleChangePage = (event, newPage) => {\n        this.setState({\n            page: newPage\n        });\n    };\n\n    handleChangeRowsPerPage = (event) => {\n        this.setState({\n            page: 0,\n            rowsPerPage: parseInt(event.target.value, 10)\n        })\n    };\n\n    handleRequestSort = (event, property) => {\n        const { orderBy, orderDirection } = this.state;\n        const isAscending = (orderBy === property && orderDirection === 'asc');\n        this.setState({\n            orderBy: property,\n            orderDirection: (isAscending) ? 'desc' : 'asc'\n        })\n    };\n\n    createSortHandler = (property) => (event) => {\n        this.handleRequestSort(event, property)\n    };\n\n    descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n            return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n            return 1;\n        }\n        return 0;\n    }\n\n    getComparator(order, orderBy) {\n        return order === 'desc'\n            ? (a, b) => this.descendingComparator(a, b, orderBy)\n            : (a, b) => -this.descendingComparator(a, b, orderBy)\n    }\n\n    sortedPatient = (patient, comparator) => {\n        const stabilizedRowArray = patient.map((el, index) => [el, index])\n        stabilizedRowArray.sort((a, b) => {\n            const order = comparator(a[0], b[0])\n            if (order !== 0) return order\n            return a[1] - b[1]\n        })\n        return stabilizedRowArray.map((el) => el[0])\n    }\n\n    render() {\n        const { isOpenDialogAdd, isOpenDialogEdit, patients, currentPatient,\n            orderBy, orderDirection, headCells, page, rowsPerPage, } = this.state;\n        let emptyRows = null\n        if (patients) {\n            emptyRows = rowsPerPage - Math.min(rowsPerPage, patients.length - page * rowsPerPage);\n        }\n        return <div className=\"patient full\">\n            <BreadCrumbs data={data} />\n            {\n                isOpenDialogAdd && <AddPatientDialog\n                    open={isOpenDialogAdd}\n                    handleToggleDialogAdd={this.handleToggleDialogAdd}\n                    addNewPatient={this.addNewPatient}\n                />\n            }\n            {\n                isOpenDialogEdit && <EditPatientDialog\n                    open={isOpenDialogEdit}\n                    handleToggleDialogEdit={this.handleToggleDialogEdit}\n                    editPatient={this.editPatient}\n                    patient={currentPatient}\n                />\n            }\n            <div className=\"add-area\">\n                <button className=\"report\" onClick={this.handleToggleDialogAdd}><span>Add</span> <AddIcon /></button>\n            </div>\n            <section id=\"patient-section\" className=\"main-section\">\n                <TableContainer component={Paper}>\n                    <div className=\"search-area\">\n                        <InputBase\n                            className=\"seach-bar\"\n                            placeholder=\"Search Patient\"\n                        />\n                        <IconButton type=\"submit\" className=\"search-button\" aria-label=\"search\">\n                            <SearchIcon />\n                        </IconButton>\n                    </div>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                {headCells.map((headCell) => {\n                                    return <TableCell key={headCell.id}>\n                                        {(headCell.sortable)\n                                            ? <TableSortLabel\n                                                active={orderBy === headCell.id}\n                                                direction={orderBy === headCell.id ? orderDirection : 'asc'}\n                                                onClick={this.createSortHandler(headCell.id)}\n                                            >\n                                                {headCell.label}\n                                            </TableSortLabel>\n                                            : headCell.label\n                                        }\n                                    </TableCell>\n                                })}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {patients && patients.length > 0 && this.sortedPatient(patients, this.getComparator(orderDirection, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((p) => <TableRow key={p.id}>\n                                <TableCell align=\"left\">\n                                    <Link to={`/patient-profile/${p.id}`} className=\"user-link\">{p.name}</Link>\n                                </TableCell>\n                                <TableCell align=\"left\">{p.gender}</TableCell>\n                                <TableCell align=\"left\">{p.dob}</TableCell>\n                                <TableCell align=\"left\">{p.address}</TableCell>\n                                <TableCell align=\"left\">{p.phoneNumber}</TableCell>\n                                <TableCell align=\"left\">\n                                    <Button color=\"primary\" size=\"small\" >\n                                        <EditIcon fontSize=\"small\" className=\"edit-button\" onClick={() => { this.handleEditButton(p.id) }}></EditIcon>\n                                    </Button>\n                                    <Button color=\"secondary\" size=\"small\" onClick={() => { window.confirm('Do you want to delete ?') && this.deletePatient(p.id) }}>\n                                        <DeleteIcon fontSize=\"small\" color=\"secondary\"></DeleteIcon>\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                            )}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 59 * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                            {/*  */}\n\n                        </TableBody>\n                    </Table>\n                    <TablePagination\n                        component=\"div\"\n                        count={patients && patients.length || 0}\n                        page={page}\n                        onChangePage={this.handleChangePage}\n                        rowsPerPage={rowsPerPage}\n                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        rowsPerPageOptions={[5, 10, 15]}\n                    />\n                </TableContainer>\n            </section>\n        </div>\n    }\n}\n\nexport default Patient"]},"metadata":{},"sourceType":"module"}